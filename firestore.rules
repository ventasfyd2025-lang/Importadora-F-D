rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth != null;
    }

    function isAdmin() {
      return isSignedIn() && (request.auth.token.admin == true || request.auth.token.isAdmin == true);
    }

    function isOrderOwner() {
      return isSignedIn()
        && (
          (request.auth.uid != null && request.auth.uid == resource.data.userId)
          || (request.auth.token.email != null && resource.data.customerEmail != null
            && request.auth.token.email == resource.data.customerEmail)
        );
    }

    function validateProduct(data) {
      return data.nombre is string
        && data.precio is number
        && data.stock is number
        && data.categoria is string
        && (!data.keys().hasAny(['id']) || data.id is string);
    }

    function validateOrder(data) {
      return data.total is number
        && data.items is list
        && data.items.size() > 0
        && data.customerEmail is string
        && data.status in ['pending', 'pending_verification', 'confirmed', 'preparing', 'shipped', 'delivered', 'cancelled'];
    }

    function validateChatMessage(data) {
      return data.userId is string
        && data.userEmail is string
        && data.message is string
        && data.timestamp != null
        && data.isAdmin is bool
        && (!('orderId' in data) || data.orderId is string);
    }

    // Validar que usuarios regulares solo puedan editar campos permitidos
    function validateUserUpdate() {
      // Campos sensibles que NO pueden ser editados por usuarios regulares
      let protectedFields = [
        'role',
        'isAdmin',
        'customClaims',
        'createdAt',
        'blocked',
        'blockedAt',
        'blockedReason'
      ];

      // Obtener solo los campos que CAMBIARON (no los que existen)
      let changedKeys = request.resource.data.diff(resource.data).changedKeys();

      // Si el usuario intenta MODIFICAR campos protegidos, rechazar
      return !changedKeys.hasAny(protectedFields);
    }

    match /products/{productId} {
      allow read: if true;
      allow create, update: if isAdmin() && validateProduct(request.resource.data);
      allow delete: if isAdmin();
    }

    match /categories/{categoryId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /categorias/{categoryId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /config/{configId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /site_config/{configId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /siteConfig/{configId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /orders/{orderId} {
      allow create: if validateOrder(request.resource.data);
      allow read: if isAdmin() || isOrderOwner();
      allow update, delete: if isAdmin();
    }

    match /users/{userId} {
      // Lectura: admin o el propio usuario
      allow read: if isAdmin() || (isSignedIn() && request.auth.uid == userId);

      // Creación: admin sin restricciones, usuario regular sin campos protegidos
      allow create: if isAdmin()
        || (isSignedIn() && request.auth.uid == userId
            && !request.resource.data.keys().hasAny(['role', 'isAdmin', 'customClaims', 'blocked', 'blockedAt', 'blockedReason']));

      // Actualización: admin sin restricciones, usuario regular con validación de cambios
      allow update: if isAdmin()
        || (isSignedIn() && request.auth.uid == userId && validateUserUpdate());

      // Borrado: solo admin
      allow delete: if isAdmin();
    }

    match /chat_messages/{messageId} {
      allow create: if isSignedIn()
        && request.auth.uid == request.resource.data.userId
        && validateChatMessage(request.resource.data);
      allow read: if isAdmin()
        || (isSignedIn() && request.auth.uid == resource.data.userId);
      allow update: if isAdmin()
        || (isSignedIn() && request.auth.uid == resource.data.userId);
      allow delete: if isAdmin();
    }

    match /daily_reports/{reportId} {
      allow read, write: if isAdmin();
    }

    match /{document=**} {
      allow read, write: if false;
    }
  }
}
