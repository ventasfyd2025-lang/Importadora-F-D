rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth != null;
    }

    function isAdmin() {
      return isSignedIn() && (request.auth.token.admin == true || request.auth.token.isAdmin == true);
    }

    function isOrderOwner() {
      return isSignedIn()
        && (
          (request.auth.uid != null && request.auth.uid == resource.data.userId)
          || (request.auth.token.email != null && resource.data.customerEmail != null
            && request.auth.token.email == resource.data.customerEmail)
        );
    }

    function validateProduct(data) {
      return data.nombre is string
        && data.precio is number
        && data.stock is number
        && data.categoria is string
        && (!data.keys().hasAny(['id']) || data.id is string);
    }

    function validateOrder(data) {
      return data.total is number
        && data.items is list
        && data.items.size() > 0
        && data.customerEmail is string
        && data.status in ['pending', 'pending_payment', 'pending_verification', 'confirmed', 'preparing', 'shipped', 'delivered', 'cancelled'];
    }

    function validateChatMessage(data) {
      return data.userId is string
        && data.userEmail is string
        && data.message is string
        && data.timestamp != null
        && data.isAdmin is bool
        && (!('orderId' in data) || data.orderId is string);
    }

    function validateDiscount(data) {
      return data.codigo is string
        && data.descuento is number
        && data.descuento > 0
        && data.tipo in ['porcentaje', 'fijo']
        && data.productosAplicables is list
        && data.fechaInicio is string
        && data.fechaFin is string
        && data.activo is bool
        && (!('descripcion' in data) || data.descripcion is string);
    }

    // Validar que usuarios regulares solo puedan editar campos permitidos
    function validateUserUpdate() {
      // Campos sensibles que NO pueden ser editados por usuarios regulares
      let protectedFields = [
        'role',
        'isAdmin',
        'customClaims',
        'createdAt',
        'blocked',
        'blockedAt',
        'blockedReason'
      ];

      // Obtener solo los campos que CAMBIARON (no los que existen)
      let changedKeys = request.resource.data.diff(resource.data).changedKeys();

      // Si el usuario intenta MODIFICAR campos protegidos, rechazar
      return !changedKeys.hasAny(protectedFields);
    }

    match /products/{productId} {
      allow read: if true;

      // Admin puede crear, actualizar y eliminar sin restricciones
      allow create: if isAdmin() && validateProduct(request.resource.data);
      allow delete: if isAdmin();

      // Admin puede actualizar todo
      allow update: if isAdmin() && validateProduct(request.resource.data);

      // Usuarios autenticados (incluyendo anónimos) pueden actualizar solo el stock
      // durante el checkout, con validación
      allow update: if isSignedIn()
        && request.resource.data.diff(resource.data).changedKeys().hasOnly(['stock'])
        && request.resource.data.stock is number
        && request.resource.data.stock >= 0
        && request.resource.data.stock <= resource.data.stock; // Solo puede decrementar
    }

    match /categories/{categoryId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /categorias/{categoryId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /config/{configId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /site_config/{configId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /siteConfig/{configId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /orders/{orderId} {
      allow create: if validateOrder(request.resource.data);
      allow read: if isAdmin() || isOrderOwner();
      allow update, delete: if isAdmin();
    }

    match /users/{userId} {
      // Lectura: admin o el propio usuario
      allow read: if isAdmin() || (isSignedIn() && request.auth.uid == userId);

      // Creación: admin sin restricciones, usuario regular sin campos protegidos
      allow create: if isAdmin()
        || (isSignedIn() && request.auth.uid == userId
            && !request.resource.data.keys().hasAny(['role', 'isAdmin', 'customClaims', 'blocked', 'blockedAt', 'blockedReason']));

      // Actualización: admin sin restricciones, usuario regular con validación de cambios
      allow update: if isAdmin()
        || (isSignedIn() && request.auth.uid == userId && validateUserUpdate());

      // Borrado: solo admin
      allow delete: if isAdmin();
    }

    match /chat_messages/{messageId} {
      // Admins pueden crear mensajes para cualquier usuario
      allow create: if isAdmin() && validateChatMessage(request.resource.data);

      // Usuarios regulares solo pueden crear mensajes para sí mismos
      allow create: if isSignedIn()
        && validateChatMessage(request.resource.data);

      // Lectura: cualquiera puede leer (sin filtro para evitar problemas de permisos)
      allow read: if true;

      // Actualización: admin puede actualizar todos, usuarios pueden marcar como leído
      allow update: if isAdmin()
        || (isSignedIn() && request.resource.data.diff(resource.data).changedKeys().hasOnly(['read']));

      // Eliminación: solo admin
      allow delete: if isAdmin();
    }

    match /daily_reports/{reportId} {
      allow read, write: if isAdmin();
    }

    match /stock_transactions/{transactionId} {
      // Admin puede leer todas las transacciones
      allow read: if isAdmin();

      // Usuarios autenticados pueden crear transacciones durante checkout
      allow create: if isSignedIn()
        && request.resource.data.productId is string
        && request.resource.data.productName is string
        && request.resource.data.type in ['reservation', 'release']
        && request.resource.data.quantity is number
        && request.resource.data.previousStock is number
        && request.resource.data.newStock is number;

      // Solo admin puede actualizar o eliminar
      allow update, delete: if isAdmin();
    }

    match /stock_alerts/{alertId} {
      // Admin puede leer todas las alertas
      allow read: if isAdmin();

      // Usuarios autenticados pueden crear alertas durante checkout
      allow create: if isSignedIn()
        && request.resource.data.productId is string
        && request.resource.data.productName is string
        && request.resource.data.currentStock is number
        && request.resource.data.severity in ['low', 'critical', 'out'];

      // Solo admin puede actualizar o eliminar
      allow update, delete: if isAdmin();
    }

    match /discounts/{discountId} {
      // Cualquiera puede leer descuentos (para validar códigos en el carrito)
      allow get, list: if true;

      // Solo admin puede crear descuentos
      allow create: if isAdmin() && validateDiscount(request.resource.data);

      // Solo admin puede actualizar descuentos
      allow update: if isAdmin() && validateDiscount(request.resource.data);

      // Solo admin puede eliminar descuentos
      allow delete: if isAdmin();
    }

    match /carts/{userId} {
      // Usuarios autenticados pueden leer y escribir su propio carrito
      allow read, write: if isSignedIn() && request.auth.uid == userId;
    }

    match /{document=**} {
      allow read, write: if false;
    }
  }
}
